package mealsystem;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.junit.Test;

import ingredients.Ingredient;
import ingredients.IngredientFactory;

public class MealsTestTest {
	private static final String Exception = null;
	AbstractMealFactory meals = new MealFactory();
	
	IngredientFactory ingredient = new IngredientFactory();
	Ingredient vegetable = ingredient.createIngredient("vegetable", 1, 1.15);
	
	Meal salad = (Meal) meals.createMeal("salad", "good for your health", 0, vegetable);
	Meal steak = (Meal) meals.createMeal("salad", "also good for you", vegetable);
	Meal icecream = (Meal) meals.createMeal("icecream", "good for you", 10, vegetable);
	HashSet<AbstractMeal> meal_list = new HashSet<AbstractMeal>();
	
	
	@Test
	public void testMealsDistinguishedNotOnlyByName() {
		assertTrue(!salad.equals(steak));
	}
	
	
	@Test
	public void testMeal_ListSize(){
		meal_list.add(salad);
		meal_list.add(steak);
		meal_list.add(icecream);
		assertTrue(meal_list.size() == 3);
	}
	
	
	@Test
	public void testSettingSpecialProceHigherThanPriceShouldGiveDefaultPrice(){
		icecream.setSpecialPrice(100000);
		assertTrue(icecream.getSpecialPrice()==10);
	}
	@Test
	public void testGetSpecialPriceReturnSpecialPriceWhenOnSpecialOffer(){
		icecream.setSpecialOfferToggle(true);
		icecream.setSpecialPrice(8);
		assertTrue(icecream.getSpecialPrice()==8);
	}

	@Test(expected = RuntimeException.class)
	public void testAddExistingIngredientsReturnException(){
		steak.setBehavior(new AddIngredient());
		HashSet<Ingredient> origin = steak.getIngredients();
		steak.executeBehavior(vegetable, 1);
		HashSet<Ingredient> current = steak.getIngredients();
		assertTrue(origin.equals(current));
	}
	
	@Test(expected = RuntimeException.class)
	public void testRemoveNonExistingIngredientsReturnException(){
		steak.setBehavior(new RemoveIngredient());
		HashSet<Ingredient> origin = steak.getIngredients();
		Ingredient eggs = ingredient.createIngredient("eggs", 1, 1.15);
		steak.executeBehavior(eggs, 1);
		HashSet<Ingredient> current = steak.getIngredients();
		assertTrue(origin.equals(current));
	}
	
	@Test
	public void testNormalBehavoirReturnsEverythingToNormal(){
		HashSet<Ingredient> origin = steak.getIngredients();
		// Steak will forever be a "blueprint". We need to create new instance for it
		MainCourse steak2 = (MainCourse) steak.createNewInstance();
		
		steak2.setBehavior(new AddIngredient());
		Ingredient eggs = ingredient.createIngredient("eggs", 1, 1.15);
		steak2.executeBehavior(eggs, 1);
		
		HashSet<Ingredient> temp = steak2.getIngredients();
		System.out.println(origin.toString());
		System.out.println(temp.toString());
		assertTrue(!origin.equals(temp));
		
		
		steak.setBehavior(new NormalBehavior());
		steak.executeBehavior(vegetable, 1);
		HashSet<Ingredient> fin = steak.getIngredients();
		assertTrue(origin==fin);
		
	}
}
