package enjoyyourmeal.Meals;

import java.util.HashSet;

public class Meals {
	public String name;
	public double price;
	public double specialPrice;
	public String description = "";
	public boolean specialOffer = false;
	public HashSet<Ingredient> ingredients = new HashSet<Ingredient>();
	
	public Meals(String name, String description, Ingredient ...ingredients){
		this.name = name;
		for (Ingredient obj : ingredients){
			this.ingredients.add(obj);
		}
		this.description = description;
		this.price = updatePrices();
	}
	
	
	public double updatePrices(){
		double price = 0;
		for (Ingredient obj : this.ingredients){
			price += obj.getTotalprice();
		}
		return price;
	}
	
	public String getName() {
		return name;
	}


	public double getPrice() {
		if (specialOffer){
			return specialPrice;
		} else {
			return this.price;
		}
	}



	public double getSpecialPrice() {
		if (specialOffer){
			return specialPrice;
		} else {
			throw new RuntimeException("No special offers yet!");
		}
	}


	public void setSpecialPrice(double specialPrice) {
		if (specialOffer){
			this.specialPrice = specialPrice;
		} else {
			throw new RuntimeException("Special offer not set yet!");
		}
	}


	public String getDescription() {
		return description;
	}


	public void setDescription(String description) {
		this.description = description;
	}


	public boolean isSpecialOffer() {
		return specialOffer;
	}


	public void setSpecialOffer(boolean specialOffer) {
		this.specialOffer = specialOffer;
	}


	public HashSet<Ingredient> getIngredients() {
		return ingredients;
	}
	
	public String getIngredientsString(){
		String s = new String();
		s += "[";
		for (Ingredient obj : ingredients){
			s += obj.getName();
			s += " ";
		}
		s = s.substring(0, s.length()-1);
		s += "]";
		return s;
		
	}
	
	public void addIngredient(Ingredient ingredient){
		if (ingredients.contains(ingredient)){
			throw new RuntimeException("Ingredient already exist!");
		} else {
			ingredients.add(ingredient);
		}
	}
	
	public void changeIngredientQuantity(Ingredient ingredient, double quantity){
		if (ingredients.contains(ingredient)){
			if (quantity < 0){
				throw new RuntimeException("Quantity cannot be less than 0!");
			} else {
				ingredient.setQuantity(quantity);
			}
			
		} else {
			throw new RuntimeException("Ingredient not found!");
		}
	}


	// Equals and hash
	/**
	 * Check if the name is the same
	 */
	@Override
	public boolean equals(Object o){
		if (o instanceof Meals){
			Meals c1 = (Meals) o; 
			return (c1.getName().equals(this.name));
		}
		return false;
	}
	/**
	 * overridden hashCode method
	 */
	
	@Override
	public int hashCode(){
    	int code = 0;
        for (int i=0; i < this.name.length(); i++){
        	char c = this.name.charAt(i);
        	int h = 41+((int)c+i)*(19+i);
        	code += h;
        }
		return code;
	}
	
}
